package ru.sokolov.spring.chapter_2_AspectOrientedProgramming.Les_1_Introduction_in_AOP;

public class Test0_AOP {
    // AOP Proxy - это промежуточное звено выполняющее роль посредника.(Слайд 7)
    // В Spring мы будем использовать так называемый Proxy pattern.
    // Имеенно Proxy знает что помимо вызова методов отвечающих за основную бизнес логику класса,
    // необходимо вызвать служебные методы по логированию и проверке пользователя на права доступа.
    // Spring берет на себя управление Proxy посредником. Таким образом в Main классе и Library
    // классе нет никакого лишнего кода и вообще непонятно что при вызове метода addBook класса Library
    // будет происходить логирование и проверка прав пользователя или другие сквозные процессы.
    // Это всё настраивается отдельно от Main класса и Library класса т.е. идёт разделение
    // основного кода - Бизнес кода и служебного кода - Сквозного кода.

    // (Слайд 10)
    // AspectJ - это аспектно ориентированное расширение языка Java. Был издан в 2001 году.
    // Это framework, который стал де-факто стандартом в аспектно ориентированном программировании.
    // AspectJ - предоставляет всю функциональность AOP в отличие от Spring AOP. Но он более
    // сложный в использовании.

    // Spring AOP - предоставляет самую распространенную и необходимую функциональность AOP.
    // Но этой функциональности хватает для подавляющего большинства приложений. Зато Spring AOP
    // очень простой в использовании.


}
